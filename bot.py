import logging
import os
import asyncio
from datetime import datetime, date
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from life_visualizer import LifeVisualizer
from scheduler import WeeklyReportScheduler
from config import BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
user_birth_dates = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_genders = {}

class LifeBot:
    def __init__(self):
        self.visualizer = LifeVisualizer()
        self.scheduler = None
        self.channel_id = None  # Will be set via command
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Life Calendar Bot!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à—É –∂–∏–∑–Ω—å –≤ –Ω–µ–¥–µ–ª—è—Ö, –∫–∞–∫ –≤ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/setbirth <–¥–∞—Ç–∞> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç: DD.MM.YYYY)
/setgender <–ø–æ–ª> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª (male/female)
/age - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
/show - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∂–∏–∑–Ω–∏
/week - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ
/percentage - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–∂–∏—Ç–æ–π –∂–∏–∑–Ω–∏

üïê **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã:**
/setchannel <ID> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
/schedulestatus - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä: /setbirth 15.03.1990
–ü—Ä–∏–º–µ—Ä: /setgender male
–ü—Ä–∏–º–µ—Ä: /setchannel -1001234567890
        """
        await update.message.reply_text(welcome_text)
    
    async def set_birth(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è!\n"
                "–§–æ—Ä–º–∞—Ç: /setbirth DD.MM.YYYY\n"
                "–ü—Ä–∏–º–µ—Ä: /setbirth 15.03.1990"
            )
            return
        
        try:
            birth_date_str = context.args[0]
            birth_date = datetime.strptime(birth_date_str, "%d.%m.%Y").date()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º
            if birth_date > date.today():
                await update.message.reply_text("‚ùå –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –¥–∞—Ç—ã (–Ω–µ —Å—Ç–∞—Ä—à–µ 120 –ª–µ—Ç)
            if (date.today() - birth_date).days > 120 * 365:
                await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è!")
                return
            
            user_birth_dates[user_id] = birth_date
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä —Å —É—á–µ—Ç–æ–º –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            gender = user_genders.get(user_id, 'default')
            self.visualizer.set_gender(gender)
            
            await update.message.reply_text(
                f"‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {birth_date.strftime('%d.%m.%Y')}\n"
                f"–ü–æ–ª: {self._get_gender_display(gender)}\n"
                f"–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /show –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∂–∏–∑–Ω–∏!"
            )
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: DD.MM.YYYY\n"
                "–ü—Ä–∏–º–µ—Ä: /setbirth 15.03.1990"
            )
    
    async def set_gender(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª!\n"
                "–§–æ—Ä–º–∞—Ç: /setgender <–ø–æ–ª>\n"
                "–í–∞—Ä–∏–∞–Ω—Ç—ã: male (–º—É–∂—Å–∫–æ–π) –∏–ª–∏ female (–∂–µ–Ω—Å–∫–∏–π)\n"
                "–ü—Ä–∏–º–µ—Ä: /setgender male"
            )
            return
        
        gender = context.args[0].lower()
        
        if gender not in ['male', 'female']:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: male (–º—É–∂—Å–∫–æ–π) –∏–ª–∏ female (–∂–µ–Ω—Å–∫–∏–π)\n"
                "–ü—Ä–∏–º–µ—Ä: /setgender male"
            )
            return
        
        user_genders[user_id] = gender
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä
        self.visualizer.set_gender(gender)
        
        await update.message.reply_text(
            f"‚úÖ –ü–æ–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self._get_gender_display(gender)}\n"
            f"–û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏: {self.visualizer.life_expectancy_years} –ª–µ—Ç\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /show –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è!"
        )
    
    def _get_gender_display(self, gender):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª–∞"""
        if gender == 'male':
            return '–º—É–∂—Å–∫–æ–π'
        elif gender == 'female':
            return '–∂–µ–Ω—Å–∫–∏–π'
        else:
            return '–Ω–µ —É–∫–∞–∑–∞–Ω'
    
    async def show_calendar(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∂–∏–∑–Ω–∏"""
        user_id = update.effective_user.id
        
        if user_id not in user_birth_dates:
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setbirth DD.MM.YYYY"
            )
            return
        
        birth_date = user_birth_dates[user_id]
        gender = user_genders.get(user_id, 'default')
        self.visualizer.set_gender(gender)
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        try:
            image_path = self.visualizer.create_life_grid(birth_date)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
            week_info = self.visualizer.get_week_info(birth_date)
            percentage_info = self.visualizer.get_life_percentage(birth_date)
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é –ø–æ–¥–ø–∏—Å—å
            caption = f"""üéØ **Your Life Calendar**

üìÖ **Birth Date:** {birth_date.strftime('%B %d, %Y')}
üë§ **Gender:** {self._get_gender_display(gender)}
üìä **Life Expectancy:** {week_info['life_expectancy']} years

üìà **Current Status:**
‚Ä¢ Age: {week_info['age_years']} years, {week_info['week_in_year']} weeks
‚Ä¢ Weeks Lived: {week_info['total_weeks']:,}
‚Ä¢ Weeks Remaining: {week_info['weeks_remaining']:,}
‚Ä¢ Life Progress: {percentage_info['percentage']:.1f}%

üî¥ Red squares = Weeks you've lived
‚ö™ White squares = Weeks ahead of you

üí° Each square represents 1 week of your life"""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            with open(image_path, 'rb') as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=caption,
                    parse_mode='Markdown'
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(image_path)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    async def week_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ"""
        user_id = update.effective_user.id
        
        if user_id not in user_birth_dates:
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setbirth DD.MM.YYYY"
            )
            return
        
        birth_date = user_birth_dates[user_id]
        gender = user_genders.get(user_id, 'default')
        self.visualizer.set_gender(gender)
        week_info = self.visualizer.get_week_info(birth_date)
        
        message = f"""
üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏:

üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date.strftime('%d.%m.%Y')}
üë§ –ü–æ–ª: {self._get_gender_display(gender)}
üìÖ –¢–µ–∫—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç: {week_info['age_years']} –ª–µ—Ç, {week_info['week_in_year']} –Ω–µ–¥–µ–ª—å
‚úÖ –ü—Ä–æ–∂–∏—Ç–æ –Ω–µ–¥–µ–ª—å: {week_info['total_weeks']:,}
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–¥–µ–ª—å: {week_info['weeks_remaining']:,}
üéØ –í—Å–µ–≥–æ –Ω–µ–¥–µ–ª—å –≤ –∂–∏–∑–Ω–∏: {week_info['total_weeks'] + week_info['weeks_remaining']:,}
üìà –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {week_info['life_expectancy']} –ª–µ—Ç

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /show –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è!
        """
        
        await update.message.reply_text(message)
    
    async def show_age(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç"""
        user_id = update.effective_user.id
        
        if user_id not in user_birth_dates:
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setbirth DD.MM.YYYY"
            )
            return
        
        birth_date = user_birth_dates[user_id]
        age_info = self.visualizer.calculate_age(birth_date)
        
        message = f"""
üéÇ –í–∞—à —Ç–æ—á–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:

üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date.strftime('%d.%m.%Y')}
‚è∞ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {date.today().strftime('%d.%m.%Y')}

üìä –í–æ–∑—Ä–∞—Å—Ç:
   ‚Ä¢ {age_info['years']} –ª–µ—Ç
   ‚Ä¢ {age_info['months']} –º–µ—Å—è—Ü–µ–≤  
   ‚Ä¢ {age_info['days']} –¥–Ω–µ–π

üìà –í—Å–µ–≥–æ:
   ‚Ä¢ {age_info['total_days']:,} –¥–Ω–µ–π
   ‚Ä¢ {age_info['total_weeks']:,} –Ω–µ–¥–µ–ª—å

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /percentage –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–æ–∂–∏—Ç–æ–π –∂–∏–∑–Ω–∏!
        """
        
        await update.message.reply_text(message)
    
    async def show_percentage(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–∂–∏—Ç–æ–π –∂–∏–∑–Ω–∏"""
        user_id = update.effective_user.id
        
        if user_id not in user_birth_dates:
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setbirth DD.MM.YYYY"
            )
            return
        
        birth_date = user_birth_dates[user_id]
        gender = user_genders.get(user_id, 'default')
        self.visualizer.set_gender(gender)
        percentage_info = self.visualizer.get_life_percentage(birth_date)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é —à–∫–∞–ª—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_bar = self._create_progress_bar(percentage_info['percentage'])
        
        message = f"""
üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–∂–∏—Ç–æ–π –∂–∏–∑–Ω–∏:

üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date.strftime('%d.%m.%Y')}
üë§ –ü–æ–ª: {self._get_gender_display(gender)}
üìà –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self.visualizer.life_expectancy_years} –ª–µ—Ç

{progress_bar}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
   ‚Ä¢ –ü—Ä–æ–∂–∏—Ç–æ: {percentage_info['weeks_lived']:,} –Ω–µ–¥–µ–ª—å
   ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {percentage_info['weeks_remaining']:,} –Ω–µ–¥–µ–ª—å
   ‚Ä¢ –í—Å–µ–≥–æ: {percentage_info['total_weeks']:,} –Ω–µ–¥–µ–ª—å
   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç: {percentage_info['percentage']}%

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /show –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è!
        """
        
        await update.message.reply_text(message)
    
    def _create_progress_bar(self, percentage):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —à–∫–∞–ª—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        filled_length = int(percentage / 5)  # 5% –Ω–∞ —Å–∏–º–≤–æ–ª
        empty_length = 20 - filled_length
        
        filled = '‚ñà' * filled_length
        empty = '‚ñë' * empty_length
        
        return f"–ü—Ä–æ–≥—Ä–µ—Å—Å: [{filled}{empty}] {percentage}%"
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ Life Calendar Bot

üéØ –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç:
–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –≤–∞—à–µ–π –∂–∏–∑–Ω–∏ –≤ –Ω–µ–¥–µ–ª—è—Ö, –ø–æ–∫–∞–∑—ã–≤–∞—è —Å–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å –≤—ã —É–∂–µ –ø—Ä–æ–∂–∏–ª–∏ –∏ —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å.

üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/setbirth <–¥–∞—Ç–∞> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
/setgender <–ø–æ–ª> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª (male/female)
/age - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
/show - –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∂–∏–∑–Ω–∏
/week - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–µ–¥–µ–ª—è–º
/percentage - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–∂–∏—Ç–æ–π –∂–∏–∑–Ω–∏

üïê **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã:**
/setchannel <ID> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
/schedulestatus - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üìÖ –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã:
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY
–ü—Ä–∏–º–µ—Ä: 15.03.1990

üë§ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–∞:
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: male (–º—É–∂—Å–∫–æ–π) –∏–ª–∏ female (–∂–µ–Ω—Å–∫–∏–π)
–ü—Ä–∏–º–µ—Ä: /setgender male

üí° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –ü–æ–ª –≤–ª–∏—è–µ—Ç –Ω–∞ –æ–∂–∏–¥–∞–µ–º—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏
‚Ä¢ –ú—É–∂—á–∏–Ω—ã: 75 –ª–µ—Ç, –ñ–µ–Ω—â–∏–Ω—ã: 82 –≥–æ–¥–∞
‚Ä¢ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 80 –ª–µ—Ç
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –ø–æ–ª –æ–¥–∏–Ω —Ä–∞–∑!

üé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è:
‚Ä¢ –ö—Ä–∞—Å–Ω—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã = –ø—Ä–æ–∂–∏—Ç—ã–µ –Ω–µ–¥–µ–ª–∏
‚Ä¢ –°–µ—Ä—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã = –±—É–¥—É—â–∏–µ –Ω–µ–¥–µ–ª–∏
‚Ä¢ –ö–∞–∂–¥—ã–π –∫–≤–∞–¥—Ä–∞—Ç = 1 –Ω–µ–¥–µ–ª—è –∂–∏–∑–Ω–∏
        """
        await update.message.reply_text(help_text)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await update.message.reply_text(
            "ü§ñ –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
        )
    
    async def set_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        user_id = update.effective_user.id
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞!\n"
                "–§–æ—Ä–º–∞—Ç: /setchannel <ID_–∫–∞–Ω–∞–ª–∞>\n"
                "–ü—Ä–∏–º–µ—Ä: /setchannel -1001234567890\n\n"
                "üí° –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞:\n"
                "1. –î–æ–±–∞–≤—å—Ç–µ @userinfobot –≤ –≤–∞—à –∫–∞–Ω–∞–ª\n"
                "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100)"
            )
            return
        
        try:
            channel_id = context.args[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞ (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å -100)
            if not channel_id.startswith('-100'):
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞!\n"
                    "ID –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å -100\n"
                    "–ü—Ä–∏–º–µ—Ä: -1001234567890"
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞–Ω–∞–ª–∞
            self.channel_id = channel_id
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
            if not self.scheduler:
                self.scheduler = WeeklyReportScheduler(BOT_TOKEN, channel_id)
                self.scheduler.start_scheduler()
                await update.message.reply_text(
                    f"‚úÖ –ö–∞–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {channel_id}\n"
                    f"üïê –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω!\n"
                    f"üìÖ –û—Ç—á–µ—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 00:00 –ø–æ –ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏\n"
                    f"üåç –í—Ä–µ–º—è: Europe/Lisbon (–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è)"
                )
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                self.scheduler.channel_id = channel_id
                await update.message.reply_text(
                    f"‚úÖ –ö–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {channel_id}\n"
                    f"üïê –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å\n"
                    f"üìÖ –°–ª–µ–¥—É—é—â–∏–π –æ—Ç—á–µ—Ç: –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 00:00 (–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è)"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–∞–Ω–∞–ª–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–∞–Ω–∞–ª–∞")
    
    async def scheduler_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if not self.scheduler:
            await update.message.reply_text(
                "üïê **–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:**\n\n"
                "‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω\n"
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setchannel –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤"
            )
            return
        
        try:
            status = self.scheduler.get_scheduler_status()
            
            if 'error' in status:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {status['error']}")
                return
            
            next_run = status['next_run']
            next_run_str = next_run.strftime('%A, %d %B %Y at %H:%M') if next_run else "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
            
            message = f"""üïê **–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:**

‚úÖ **–°–æ—Å—Ç–æ—è–Ω–∏–µ:** {'–†–∞–±–æ—Ç–∞–µ—Ç' if status['running'] else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:** {status['schedule']}
üåç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** {status['timezone']}
üìä **–ó–∞–¥–∞—á:** {status['job_count']}
‚è∞ **–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫:** {next_run_str}

üí° **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 00:00
‚Ä¢ –í—Ä–µ–º—è: –ü–æ—Ä—Ç—É–≥–∞–ª–∏—è (Europe/Lisbon)
‚Ä¢ –ö–∞–Ω–∞–ª: {self.channel_id or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}"""
            
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not BOT_TOKEN:
        logger.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    bot = LifeBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("setbirth", bot.set_birth))
    application.add_handler(CommandHandler("setgender", bot.set_gender))
    application.add_handler(CommandHandler("age", bot.show_age))
    application.add_handler(CommandHandler("show", bot.show_calendar))
    application.add_handler(CommandHandler("week", bot.week_info))
    application.add_handler(CommandHandler("percentage", bot.show_percentage))
    application.add_handler(CommandHandler("setchannel", bot.set_channel))
    application.add_handler(CommandHandler("schedulestatus", bot.scheduler_status))
    application.add_handler(CommandHandler("help", bot.help_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
